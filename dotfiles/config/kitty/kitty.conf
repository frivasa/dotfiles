# vim:fileencoding=utf-8:foldmethod=marker
##############################################
## FONTS
##############################################
font_family      family="JetBrainsMono Nerd Font Mono" style=Regular features='+zero +ss02 +cv04 +cv16 +cv18 +cv19 +cv20'
bold_font        family="JetBrainsMono Nerd Font Mono" style=Bold features='+zero +ss02 +cv04 +cv16 +cv18 +cv19 +cv20'
italic_font      family="JetBrainsMono Nerd Font Mono" style="Regular Italic" features='+zero +ss02 +cv04 +cv16 +cv18 +cv19 +cv20'
bold_italic_font family="JetBrainsMono Nerd Font Mono" style="Bold Italic" features='+zero +ss02 +cv04 +cv16 +cv18 +cv19 +cv20'

# modify_font cell_height 10%
font_size 13.0

symbol_map U+e000-U+e00a,U+ea60-U+ebeb,U+e0a0-U+e0c8,U+e0ca,U+e0cc-U+e0d7,U+e200-U+e2a9,U+e300-U+e3e3,U+e5fa-U+e6b7,U+e700-U+e8ef,U+ed00-U+efc1,U+f000-U+f2ff,U+f000-U+f2e0,U+f300-U+f381,U+f400-U+f533,U+f0001-U+f1af0 Symbols Nerd Font Mono

# cursor #cccccc
# cursor_text_color #111111

# cursor_shape block
#: The cursor shape can be one of block, beam, underline. Note that

# cursor_shape_unfocused hollow
#: The unfocused cursor shape can be one of block, beam, underline,
#: hollow and unchanged (leave the cursor shape as it is).

cursor_trail 1000
#: zooming around the screen. The actual value of this option controls
#: when the animation is triggered. It is a number of milliseconds.
# cursor_trail_decay 0.1 0.4
#: values specifying the fastest and slowest decay times in seconds.
#: The first value corresponds to the fastest decay time (minimum),
#: and the second value corresponds to the slowest decay time
#: (maximum). The second value must be equal to or greater than the
#: first value. Smaller values result in a faster decay of the cursor
#: trail. Adjust these values to control how quickly the cursor trail
#: fades away.
# cursor_trail_start_threshold 2
#: Set the distance threshold for starting the cursor trail. This
#: option accepts a positive integer value that represents the minimum
#: number of cells the cursor must move before the trail is started.
#: When the cursor moves less than this threshold, the trail is
#: skipped, reducing unnecessary cursor trail animation.

scrollback_lines -1
# scrollback_indicator_opacity 1.0
scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER

# map ctrl+f launch --type=overlay --stdin-source=@screen_scrollback /sbin/fzf --no-sort --no-mouse --tac --exact -i
map ctrl+f launch --type=overlay --stdin-source=@screen_scrollback nvim -c 'set nobackup nowritebackup' -c 'set buftype=nofile' -c 'normal G'
# better scrollback with fuzzy search.
# This can eat all the scrollback and allows you to grep as in nvim.

##############################################
# Mouse
##############################################
mouse_hide_wait 3.0
# url_color #0087bd
# url_style curly
#: can be one of: none, straight, double, curly, dotted, dashed.

open_url_with default
#: The program to open clicked URLs. The special value default will
#: are found, it will use the Operating System's default URL handler

url_prefixes file ftp ftps gemini git gopher http https irc ircs kitty mailto news sftp ssh
#: The set of URL prefixes to look for when detecting a URL under the

detect_urls yes

copy_on_select no

#:     copy_on_select a1
#:     map shift+cmd+v paste_from_buffer a1
#: Note that copying to the clipboard is a security risk, as all
#: programs, including websites open in your browser can read the
#: contents of the system clipboard.

# clear_selection_on_clipboard_loss no

# focus_follows_mouse no
#: Set the active window to the window under the mouse when moving the

# repaint_delay 10
# input_delay 3
# sync_to_monitor yes

enable_audio_bell no
visual_bell_duration 0.0
# visual_bell_color none
window_alert_on_bell no
# bell_on_tab "ðŸ”” "
# command_on_bell none
# bell_path none
# linux_bell_theme __custom

# window_border_width 0.5pt
#: The width of window borders. Can be either in pixels (px) or pts
#: (pt). Values in pts will be rounded to the nearest number of pixels

window_margin_width 0
#: The window margin (in pts) (blank area outside the border). A
#: single value sets all four sides. Two values set the vertical and
#: horizontal sides. Three values set top, horizontal and bottom. Four
#: values set top, right, bottom and left.

window_padding_width 20
#: The window padding (in pts) (blank area between the text and the
#: window border). A single value sets all four sides. Two values set
#: the vertical and horizontal sides. Three values set top, horizontal
#: and bottom. Four values set top, right, bottom and left.
active_border_color #d7afaf
#: The color for the border of the active window. Set this to none to
#: not draw borders around the active window.
inactive_border_color #afd7d7
#: The color for the border of inactive windows.
# bell_border_color #afd7d7
#: The color for the border of inactive windows in which a bell has
#: occurred.

hide_window_decorations yes
#: Hide the window decorations (title-bar and window borders) with

confirm_os_window_close 2
# default -1

##############################################
# Tab bar
##############################################

# tab_bar_edge bottom
#: The edge to show the tab bar on, top or bottom.

# tab_bar_margin_width 0.0
#: The margin to the left and right of the tab bar (in pts).

# tab_bar_margin_height 0.0 0.0
#: The margin above and below the tab bar (in pts). The first number
#: is the margin between the edge of the OS Window and the tab bar.
#: The second number is the margin between the tab bar and the
#: contents of the current tab.

# tab_bar_style fade
#: The tab bar style, can be one of:
#: fade
#:     Each tab's edges fade into the background color. (See also tab_fade)
#: slant
#:     Tabs look like the tabs in a physical file.
#: separator
#:     Tabs are separated by a configurable separator. (See also
#:     tab_separator)
#: powerline
#:     Tabs are shown as a continuous line with "fancy" separators.
#:     (See also tab_powerline_style)
#: custom
#:     A user-supplied Python function called draw_tab is loaded from the file
#:     tab_bar.py in the kitty config directory. For examples of how to
#:     write such a function, see the functions named draw_tab_with_* in
#:     kitty's source code: kitty/tab_bar.py. See also
#:     this discussion <https://github.com/kovidgoyal/kitty/discussions/4447>
#:     for examples from kitty users.
#: hidden
#:     The tab bar is hidden. If you use this, you might want to create
#:     a mapping for the select_tab action which presents you with a list of
#:     tabs and allows for easy switching to a tab.

# tab_bar_align left
#: The horizontal alignment of the tab bar, can be one of: left,
#: center, right.

# tab_bar_min_tabs 2
#: The minimum number of tabs that must exist before the tab bar is
#: shown.

tab_switch_strategy right
# previous last left
#
# tab_fade 0.25 0.5 0.75 1
#: Control how each tab fades into the background when using fade for
#: the tab_bar_style. Each number is an alpha (between zero and one)
#: that controls how much the corresponding cell fades into the
#: background, with zero being no fade and one being full fade. You
#: can change the number of cells used by adding/removing entries to
#: this list.

# tab_separator " â”‡"

# tab_powerline_style angled
#: The powerline separator style between tabs in the tab bar when
#: using powerline as the tab_bar_style, can be one of: angled,
#: slanted, round.

# tab_title_template "{fmt.fg.red}{bell_symbol}{activity_symbol}{fmt.fg.tab}{tab.last_focused_progress_percent}{title}"
#: title
#:     The current tab title.
#: index
#:     The tab index usable with goto_tab N goto_tab shortcuts.
#: layout_name
#:     The current layout name.
#: num_windows
#:     The number of windows in the tab.
#: num_window_groups
#:     The number of window groups (a window group is a window and all of its overlay windows) in the tab.
#: tab.active_wd
#:     The working directory of the currently active window in the tab
#:     (expensive, requires syscall). Use tab.active_oldest_wd to get
#:     the directory of the oldest foreground process rather than the newest.
#: tab.active_exe
#:     The name of the executable running in the foreground of the currently
#:     active window in the tab (expensive, requires syscall). Use
#:     tab.active_oldest_exe for the oldest foreground process.
#: max_title_length
#:     The maximum title length available.
#: keyboard_mode
#:     The name of the current keyboard mode <https://sw.kovidgoyal.net/kitty/mapping/#modal-mappings> or the empty string if no keyboard mode is active.
#: tab.last_focused_progress_percent
#:     If a command running in a window reports the progress for a task, show this progress as a percentage
#:     from the most recently focused window in the tab. Empty string if no progress is reported.
#: tab.progress_percent
#:     If a command running in a window reports the progress for a task, show this progress as a percentage
#:     from all windows in the tab, averaged. Empty string is no progress is reported.

#: Note that formatting is done by Python's string formatting
#: machinery, so you can use, for instance, {layout_name[:2].upper()}
#: to show only the first two letters of the layout name, upper-cased.
#: If you want to style the text, you can use styling directives, for
#: example:
#: `{fmt.fg.red}red{fmt.fg.tab}normal{fmt.bg._00FF00}greenbg{fmt.bg.tab}`.
#: Similarly, for bold and italic:
#: `{fmt.bold}bold{fmt.nobold}normal{fmt.italic}italic{fmt.noitalic}`.
#: The 256 eight terminal colors can be used as `fmt.fg.color0`
#: through `fmt.fg.color255`. Note that for backward compatibility, if
#: {bell_symbol} or {activity_symbol} are not present in the template,
#: they are prepended to it.

# active_tab_foreground   #000
# active_tab_background   #eee
# active_tab_font_style   bold-italic
# inactive_tab_foreground #444
# inactive_tab_background #999
# inactive_tab_font_style normal

# tab_bar_background none
# tab_bar_margin_color none

##############################################
# Color scheme
##############################################
# foreground #dddddd
# background #000000
background_opacity 0.7
# background_blur 0
# dynamic_background_opacity no
#: Allow changing of the background_opacity dynamically, using either
#: keyboard shortcuts (increase_background_opacity and
#: decrease_background_opacity) or the remote control facility.

# dim_opacity 0.4
#: How much to dim text that has the DIM/FAINT attribute set. One
#: means no dimming and zero means fully dimmed (i.e. invisible).

# selection_foreground #000000
# selection_background #fffacd


##############################################
# The color table
##############################################
#: The 256 terminal colors. There are 8 basic colors, each color has a
#: dull and bright version, for the first 16 colors. You can set the
#: remaining 240 colors as color16 to color255.

# color0 #000000
# color8 #767676
#: black

# color1 #cc0403
# color9 #f2201f
#: red

# color2  #19cb00
# color10 #23fd00
#: green

# color3  #cecb00
# color11 #fffd00
#: yellow

# color4  #0d73cc
# color12 #1a8fff
#: blue

# color5  #cb1ed1
# color13 #fd28ff
#: magenta

# color6  #0dcdcd
# color14 #14ffff
#: cyan

# color7  #dddddd
# color15 #ffffff
#: white

# mark1_foreground black
#: Color for marks of type 1

# mark1_background #98d3cb
#: Color for marks of type 1 (light steel blue)

# mark2_foreground black
#: Color for marks of type 2

# mark2_background #f2dcd3
#: Color for marks of type 1 (beige)

# mark3_foreground black
#: Color for marks of type 3

# mark3_background #f274bc
#: Color for marks of type 3 (violet)

shell zsh
editor nvim
# close_on_child_death no
# remote_control_password
# allow_remote_control no
# listen_on none
# env
#: Specify the environment variables to be set in all child processes.
#: Using the name with an equal sign (e.g. env VAR=) will set it to
#: the empty string. Specifying only the name (e.g. env VAR) will
#: remove the variable from the child process' environment. Note that
#: environment variables are expanded recursively, for example::
#:     env VAR1=a
#:     env VAR2=${HOME}/${VAR1}/b
#: The value of VAR2 will be <path to home directory>/a/b.

update_check_interval 72

# clipboard_control write-clipboard write-primary read-clipboard-ask read-primary-ask
#: Allow programs running in kitty to read and write from the
#: clipboard. You can control exactly which actions are allowed. The
#: possible actions are: write-clipboard, read-clipboard, write-
#: primary, read-primary, read-clipboard-ask, read-primary-ask. The
#: default is to allow writing to the clipboard and primary selection
#: and to ask for permission when a program tries to read from the
#: clipboard. Note that disabling the read confirmation is a security
#: risk as it means that any program, even the ones running on a
#: remote server via SSH can read your clipboard. See also
#: clipboard_max_size.

clipboard_max_size 10
#: The maximum size (in MB) of data from programs running in kitty
#: that will be stored for writing to the system clipboard. A value of
#: zero means no size limit is applied. See also clipboard_control.

linux_display_server Wayland
wayland_enable_ime no
#: Enable Input Method Extension on Wayland. This is typically used
#: for inputting text in East Asian languages. However, its
#: implementation in Wayland is often buggy and introduces latency
#: into the input loop, so disable this if you know you dont need it.

##############################################
# Keyboard shortcuts
##############################################
#: Keys are identified simply by their lowercase Unicode characters.
#: For example: a for the A key, [ for the left square bracket key,
#: other key names: <https://sw.kovidgoyal.net/kitty/keyboard-protocol/#functional>.
#: action names:    <https://sw.kovidgoyal.net/kitty/actions/>.
#: modifier keys:   ctrl, shift, alt, super.
#:     # unmap a keyboard shortcut, passing it to the program running in kitty
#:     map kitty_mod+space
#:     # completely ignore a keyboard event
#:     map ctrl+alt+f1 discard_event
#:     # combine multiple actions
#:     map kitty_mod+e combine : new_window : next_layout
#:     # multi-key shortcuts
#:     map ctrl+x>ctrl+y>z action

# kitty_mod ctrl+shift

# clear_all_shortcuts no
#: Remove all shortcut definitions up to this point. Useful, for
#: instance, to remove the default shortcuts.

# action_alias
#: E.g. action_alias launch_tab launch --type=tab --cwd=current
#: For example, the above alias allows you to
#: create mappings to launch a new tab in the current working
#: directory without duplication::
#:     map f1 launch_tab vim
#:     map f2 launch_tab emacs
#: Similarly, to alias kitten invocation::
#:     action_alias hints kitten hints --hints-offset=0

# kitten_alias
# just use aliases

##############################################
# Clipboard
##############################################
#: Copy to clipboard
# map kitty_mod+c copy_to_clipboard
# map cmd+c       copy_to_clipboard

#: Paste from clipboard
# map kitty_mod+v paste_from_clipboard
# map cmd+v       paste_from_clipboard

# map kitty_mod+s  paste_from_selection
# map shift+insert paste_from_selection

# map kitty_mod+o pass_selection_to_program

#::      map kitty_mod+o pass_selection_to_program firefox
#::  You can pass the current selection to a terminal program running
#::  in a new kitty window, by using the @selection placeholder::
#::      map kitty_mod+y new_window less @selection

##############################################
# Scrolling
##############################################
# map kitty_mod+up    scroll_line_up
# map kitty_mod+k     scroll_line_up

# map kitty_mod+down    scroll_line_down
# map kitty_mod+j       scroll_line_down

# map kitty_mod+page_up scroll_page_up
# map kitty_mod+page_down scroll_page_down

# map kitty_mod+home scroll_home
# map kitty_mod+end scroll_end

# map kitty_mod+z scroll_to_prompt -1
# map kitty_mod+0 scroll_to_prompt 0
# map kitty_mod+x scroll_to_prompt 1

# map kitty_mod+h show_scrollback

##############################################
# Window management
##############################################
# map kitty_mod+enter new_window
map ctrl+alt+enter launch --cwd=current
#::      map ctrl+n launch --location=neighbor
#::      map ctrl+f launch --location=first

# map kitty_mod+n new_os_window_with_cwd

# map kitty_mod+w close_window
# map kitty_mod+1 first_window
# map kitty_mod+2 second_window
# map kitty_mod+3 third_window
# ...

#: Visually select and focus window
# map kitty_mod+f7 focus_visible_window
#::  Display overlay numbers and alphabets on the window, and switch
#::  the focus to the window when you press the key. When there are
#::  only two windows, the focus will be switched directly without
#::  displaying the overlay. You can change the overlay characters and
#::  their order with option visual_window_select_characters.

# map kitty_mod+f8 swap_with_window

##############################################
# Tab management
##############################################
# map kitty_mod+right next_tab
# map shift+cmd+]     next_tab
# map ctrl+tab        next_tab

# map kitty_mod+left previous_tab
# map shift+cmd+[    previous_tab
# map ctrl+shift+tab previous_tab

# map kitty_mod+t new_tab
# map cmd+t       new_tab
# map kitty_mod+q close_tab
# map cmd+w       close_tab

# map kitty_mod+. move_tab_forward
# map kitty_mod+, move_tab_backward

# map kitty_mod+alt+t set_tab_title
# map shift+cmd+i     set_tab_title

##############################################
# Layout management
##############################################
# map kitty_mod+l next_layout

#: You can also create shortcuts to switch to specific layouts::
#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack
#:     map ctrl+alt+p last_used_layout

# map kitty_mod+backspace change_font_size all 0
# map cmd+0               change_font_size all 0

# map kitty_mod+e open_url_with_hints
#: Insert selected path
# map kitty_mod+p>f kitten hints --type path --program -

#: Insert selected line
# map kitty_mod+p>l kitten hints --type line --program -

##############################################
# Miscellaneous
##############################################
# map kitty_mod+f1 show_kitty_doc overview

#: anything "maximizing" nukes the login and the pc wtf
map kitty_mod+f11 discard_event
map ctrl+cmd+f    discard_event
#: Toggle maximized
map kitty_mod+f10 discard_event

# map kitty_mod+u    kitten unicode_input
# map ctrl+cmd+space kitten unicode_input

# map kitty_mod+f2 edit_config_file
# map cmd+,        edit_config_file

# map kitty_mod+a>m set_background_opacity +0.1
# map kitty_mod+a>l set_background_opacity -0.1
# map kitty_mod+a>1 set_background_opacity 1
# map kitty_mod+a>d set_background_opacity default

#: Clear to start
# map cmd+k clear_terminal to_cursor active

#: Clear scrollback
# map option+cmd+k clear_terminal scrollback active

#: Clear screen
# map cmd+ctrl+l clear_terminal to_cursor_scroll active

#: Reload kitty.conf
# map kitty_mod+f5 load_config_file
map ctrl+super+,   load_config_file

#: Debug kitty configuration
# map kitty_mod+f6 debug_config
# map opt+cmd+,    debug_config

#: Send arbitrary text on key presses
#::  E.g. map ctrl+shift+alt+h send_text all Hello World
#::  You can tell kitty to send arbitrary (UTF-8) encoded text to the
#::  client program when pressing specified shortcut keys. For
#::  example::
#::      map ctrl+alt+a send_text all Special text
#::  This will send "Special text" when you press the Ctrl+Alt+A key
#::  combination. The text to be sent decodes ANSI C escapes
#::  <https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-
#::  Quoting.html> so you can use escapes like \e to send control
#::  codes or \u21fb to send Unicode characters (or you can just input
#::  the Unicode characters directly as UTF-8 text). You can use
#::  `kitten show-key` to get the key escape codes you want to
#::  emulate.

#: Quit kitty
# map cmd+q quit
#

# BEGIN_KITTY_THEME
# Gruvbox Dark Hard
# include current-theme.conf
include ~/.cache/wal/colors-kitty.conf
# END_KITTY_THEME
